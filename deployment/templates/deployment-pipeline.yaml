---
AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Parent Stacks
      Parameters:
      - ParentECSStack
    - Label:
        default: Git Parameters
      Parameters:
      - GitHubUser
      - GitHubRepo
      - GitHubBranch
      - GitHubToken
    - Label:
        default: Service Parameters
      Parameters:
      - SpringProfiles

Parameters:
  ParentECSStack:
    Type: String

  GitHubUser:
    Type: String

  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String
    NoEcho: true

  SpringProfiles:
    Default: default,production
    Type: String

Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  JavaBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2

          phases:
            install:
              commands:
                - echo Nothing to do in the install phase...
            pre_build:
              commands:
                - export LC_ALL="en_US.UTF-8"
                - locale-gen en_US en_US.UTF-8
                - dpkg-reconfigure locales
                - locale
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - echo "Tag is ${TAG}"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
                - echo setting gradlew build permissions...
                - chmod +x gradlew
            build:
              commands:
                - echo Build started on `date`
                - echo "Running [./gradlew clean check installDist -PTAG=${TAG}]"
                - ./gradlew clean check installDist -PTAG=$TAG -PBRANCH=master
            post_build:
              commands:
                - echo $CODEBUILD_RESOLVED_SOURCE_VERSION > source-version.text
                - echo Build completed on `date`
          cache:
            paths:
              - '/root/.gradle/caches/**/*'
          artifacts:
            files:
              - service/build/install/**/*
              - service/security/**/*
              - source-version.text
              - Dockerfile
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/java:openjdk-8"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: !Sub Java-build-${AWS::StackName}
      ServiceRole: !Ref CodeBuildServiceRole

  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html#cfn-codebuild-project-cache
      Cache:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "S3"
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo starting prebuild for ${REPOSITORY_URI}
                - $(aws ecr get-login --no-include-email)
                - TAG="$(cat source-version.text | head -c 8)"
            build:
              commands:
                - echo Build started on `date`
                - echo "docker build "${BUILD_ARGS}" --tag "${REPOSITORY_URI}:${TAG}" ."
                - docker build --build-arg spring_profiles="${BUILD_ARGS}" --tag "${REPOSITORY_URI}:${TAG}" .
            post_build:
              commands:
                - echo "docker push ${REPOSITORY_URI}:${TAG}"
                - docker push "${REPOSITORY_URI}:${TAG}"
                - printf '[{"name":"sbjb","imageUri":"%s"}]' "${REPOSITORY_URI}:${TAG}" > images.json
                - echo [{"name":"sbjb","imageUri":"${REPOSITORY_URI}:${TAG}"}]
                - echo Build completed on `date`
          artifacts:
            files:
              - images.json
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: BUILD_ARGS
            Value: !Ref SpringProfiles
      Name: !Sub Docker-build-${AWS::StackName}
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: GitHub-Source-Code
          Actions:
            - Name: Code
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: ApplicationSourceCode
              RunOrder: 1
        - Name: JavaGradleBuild
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref JavaBuildProject
              InputArtifacts:
                - Name: ApplicationSourceCode
              OutputArtifacts:
                - Name: ApplicationJar
              RunOrder: 1
        - Name: DockerBuild
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuildProject
              InputArtifacts:
                - Name: ApplicationJar
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName:
                  'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
                ServiceName:
                  'Fn::ImportValue': !Sub '${ParentECSStack}Service-Name'
                FileName: images.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}

