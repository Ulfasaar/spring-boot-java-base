plugins {
    id "distribution"
    id "com.github.spotbugs" version "1.6.1"
}

version = '0.0.1-SNAPSHOT'

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = "UTF-8"

    repositories {
        mavenCentral()
    }

    configurations.all {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }

    dependencies {
        def dropwizardVersion = '3.1.0'
        def guavaVersion = '23.0'
        def reactorVersion = "3.1.5.RELEASE"

        implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '3.1.0'
        implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
        implementation group: 'io.projectreactor', name: 'reactor-core', version: reactorVersion

        implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: dropwizardVersion
        implementation group: 'io.dropwizard.metrics', name: 'metrics-healthchecks', version: dropwizardVersion

        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.11.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
        testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.9.0'
        testImplementation group: 'com.google.guava', name: 'guava-testlib', version: guavaVersion
        testImplementation group: 'io.projectreactor', name: 'reactor-test', version: reactorVersion
    }

    spotbugs {
        toolVersion = '3.1.3'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
            html.stylesheet resources.text.fromFile('../config/spotbugs/plain.xsl')
        }
    }

    checkstyle {
        configDir rootProject.file('config/checkstyle')
        configFile rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = "7.6.1"
    }
}

task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = false
        csv.enabled = false
    }
}

//noinspection GroovyAssignabilityCheck
codeCoverageReport.dependsOn {
    subprojects*.test
}

check.dependsOn codeCoverageReport
